import osimport requestsimport jsonimport timefrom dotenv import load_dotenv# 1. 获取 API 密钥load_dotenv()api_key = os.getenv("DEEPSEEK_API_KEY")if not api_key:    print("⚠️ 错误：找不到环境变量 DEEPSEEK_API_KEY！请先设置它。")    exit(1)# 2. API 端点API_URL = "https://api.deepseek.com/chat/completions"# 3. 发送请求函数def send_to_deepseek(messages, model="deepseek-chat", temperature=1.1,                     max_tokens=2000):    headers = {        "Authorization": f"Bearer {api_key}",        "Content-Type": "application/json"    }    payload = {        "model": model,        "messages": messages,        "temperature": temperature,        "max_tokens": max_tokens    }    try:        print("⏳ 正在向 DeepSeek API 发送请求...")        start_time = time.time()        response = requests.post(API_URL, headers=headers, json=payload)        response.raise_for_status()  # 检查HTTP错误        end_time = time.time()        print(f"✅ 收到响应！耗时: {end_time - start_time:.2f}秒")        return response.json()    except requests.exceptions.RequestException as e:        print(f"⚠️ 网络请求错误: {str(e)}")        return None    except json.JSONDecodeError:        print("⚠️ 响应解析错误")        return None# 4. 多行输入函数（解决换行符问题）def multiline_input(prompt):    print(prompt)    print("（输入三行空行结束输入）")    lines = []    empty_lines = 0    while True:        try:            line = input()            if line.strip() == "":                empty_lines += 1                if empty_lines >= 3:  # 连续三个空行结束输入                    break            else:                empty_lines = 0                lines.append(line)        except EOFError:  # 处理 Ctrl+D (Unix) 或 Ctrl+Z (Windows)            break    return "\n".join(lines)# 5. 读取文本文件函数def read_text_file(file_path):    try:        with open(file_path, 'r', encoding='utf-8') as file:            content = file.read()        return content    except FileNotFoundError:        print(f"⚠️ 错误：文件 '{file_path}' 未找到")        return None    except Exception as e:        print(f"⚠️ 读取文件时出错: {str(e)}")        return None# 6. 文学创作助手功能def literary_assistant():    print("\n=== 正经写戏 ===")    # 选择输入方式    print("\n请选择输入方式:")    print("1. 手动输入（支持多行文本）")    print("2. 从文本文件读取")    choice = input("请选择 (1/2): ").strip()    # 你是一位专业的文学创作助手，擅长硬科幻和神话背景的小说创作，善于捕捉分析细腻的情感。请帮助用户构思情节、分析人物、改进文风。    messages = [{        "role": "system",        "content":            ""    }]    while True:        user_input = ""        if choice == "1":            # 多行输入            user_input = multiline_input(                "\n请输入您的创作内容（小说片段、情节构思等）:")        elif choice == "2":            # 文件输入            file_path = input(                "\n请输入文本文件路径（如：E:/我的小说/第一章.txt）: ").strip()            user_input = read_text_file(file_path)            if not user_input:                print("使用手动输入模式")                user_input = multiline_input("\n请输入您的创作内容:")        else:            print("无效选择，使用手动输入模式")            user_input = multiline_input("\n请输入您的创作内容:")        if not user_input:            print("⚠️ 未输入任何内容")            return            # 添加到消息历史            messages.append({"role": "user", "content": user_input})            # 发送请求            response = send_to_deepseek(messages)            if response:                ai_reply = response["choices"][0]["message"]["content"]                # 打印回复                print("\n🤖 DeepSeek 的回复：")                print("-" * 80)                print(ai_reply)                print("-" * 80)                # 询问是否保存到文件                save_option = input("\n是否将回复保存到文件？(y/n): ").lower()                if save_option == 'y':                    save_path = input(                        "请输入保存路径（如：E:/AI回复/第一章分析.txt）: ").strip()                    try:                        with open(save_path, 'w', encoding='utf-8') as file:                            file.write(ai_reply)                        print(f"✅ 回复已保存到: {save_path}")                    except Exception as e:                        print(f"⚠️ 保存文件时出错: {str(e)}")# 5. 脑洞闲聊def chat_anything():    print("\n=== 技术小百科 ===")    print("请输入您的问题（输入 '退出' 结束）")    messages = [{        "role": "system",        "content":            ""    }]    while True:        user_input = multiline_input("\n您: ")        if user_input.lower() in ["退出", "exit"]:            break        # 添加到消息历史        messages.append({"role": "user", "content": user_input})        model = "deepseek-chat"        # 发送请求        response = send_to_deepseek(messages, model=model)        if response:            ai_reply = response["choices"][0]["message"]["content"]            if ai_reply:                print(f"已收到回复")            # 添加到消息历史            messages.append({"role": "assistant", "content": ai_reply})            # 打印回复            print("\n🤖 DeepSeek:")            print("-" * 50)            print(ai_reply)            print("-" * 50)# 6. 主菜单def main_menu():    while True:        print("\n===== DeepSeek 助手 =====")        print("1. 正经写文")        print("2. 技术百科")        print("3. 退出")        choice = input("请选择功能: ")        if choice == "1":            literary_assistant()        elif choice == "2":            chat_anything()        elif choice == "3":            print("感谢使用，再见！")            break        else:            print("无效选择，请重新输入")# 7. 启动程序if __name__ == "__main__":    """    novel_gui = AIChatGUI(        api_url=API_URL,        session_key=api_key  # 服务器将根据此key维护独立记忆    )    novel_gui.run()    """    main_menu()