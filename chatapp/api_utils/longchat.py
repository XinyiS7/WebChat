import osimport requestsfrom dotenv import load_dotenv# 1. 获取 API 密钥load_dotenv()api_key = os.getenv("DEEPSEEK_API_KEY")if not api_key:    print("⚠️ 错误：找不到环境变量 DEEPSEEK_API_KEY！请先设置它。")    exit(1)# 会话时带上上下文def build_chat_history(current_text, mode, history=None):    """    构造带上下文的对话消息    :param current_text: 当前用户输入    :param mode: 模式选择 (chat/coder)    :param history: 历史消息列表 (从session获取)    :return: 符合DeepSeek API要求的消息格式    """    if history is None:        history = []    # 系统提示词根据模式变化    system_prompt = {        "chat": "你是一个乐于助人的AI助手",        "coder": "你是一个专业的代码助手，优先返回可执行的代码片段"    }.get(mode, "你是一个乐于助人的AI助手")    messages = [        {"role": "system", "content": system_prompt}    ] + history[-50:] + [  # 保留最近指定轮次的对话        {"role": "user", "content": current_text}    ]    return messagesdef query_deepseek_api_model_long(text, api_key, mode, history):    """    改造后的API查询函数，支持上下文    :param mode: 网页表单读取    :param api_key: 用户自定义配置的环境变量    :param text: 用户最新输入    :param history: 可选的历史消息列表    """    headers = {        "Authorization": f"Bearer {api_key}",        "Content-Type": "application/json"    }    messages = build_chat_history(text, mode, history)    model_type = "deepseek-reasoner" if mode == 'coder' else "deepseek-chat"    temper = 0.7 if mode == 'coder' else 1.2    print(f"[DEBUG] 输入模式: {mode} → 模型类型: {model_type}")  # 确认输入    payload = {        "model": model_type,  # 指定模型        "messages": messages,        "temperature": temper,        "max_tokens": 2000    }    # print(f"[DEBUG] 请求载荷: {payload}")  # 打印完整 payload    try:        response = requests.post(            "https://api.deepseek.com/v1/chat/completions",  # 使用v1端点            headers=headers,            json=payload        )        print(f"[DEBUG] API 响应状态码: {response.status_code}")        # print(f"[DEBUG] API 响应内容: {response.text}")  # 关键检查点！        # 检查响应状态        if response.status_code == 200:            return response.json()["choices"][0]["message"]["content"]        else:            # 打印详细的错误信息            error_detail = response.json().get("error", {}).get("message",                                                                "未知错误")            raise Exception(                f"API请求失败: {response.status_code} - {error_detail}")    except Exception as e:        raise Exception(f"API请求异常: {str(e)}")